extends layout

block content  
    link(rel="stylesheet" href="/stylesheets/create.css")
    script(src="https://cdn.fusioncharts.com/fusioncharts/latest/fusioncharts.js")   
    script(src="https://cdn.fusioncharts.com/fusioncharts/latest/themes/fusioncharts.theme.fusion.js")
    script(type="text/javascript" src="https://cdn.fusioncharts.com/fusioncharts/latest/themes/fusioncharts.theme.candy.js")
    
    script(src="//cdn.jsdelivr.net/npm/alertifyjs@1.13.1/build/alertify.min.js")
    link(rel="stylesheet" href="//cdn.jsdelivr.net/npm/alertifyjs@1.13.1/build/css/alertify.min.css")
    link(rel="stylesheet" href="//cdn.jsdelivr.net/npm/alertifyjs@1.13.1/build/css/themes/default.min.css")
    
    .page-container
        .container
            .text
                h1 COVID-19 Visualisation (Singapore)
                
                .create-btn-ctn
                    .button-wrapper(onclick="window.history.back()" onmouseover="startAnimation()" onmouseout="stopAnimation()")
                        a(class="styled") Go back
                        i(class="fas fa-angle-left" id='animate')
                   

            .series-selector
                .floating
                    h3 Select series to be compared
                    
                    .float-right
                        .button-wrapper(onclick="showAdv()" id='show-advanced-btn')
                            a(class="styled" id="advEasy") Use advanced mode
                .select-wrapper(id="select-hider")                    
                    
                    select(id="series-compare" multiple)
                        
                        optgroup(label="Dailies")
                            option(data-placeholder="true")   
                            option(value="New local dormitory cases (per day)") New local dormitory cases (per day)
                            option(value="New local work permit holder cases (per day)") New local work permit holder cases (per day)
                            option(value="New local community cases (per day)") New local community cases (per day)
                            option(value="New local cases (per day)") New local cases (per day)
                            option(value="New imported cases(per day)") New imported cases(per day)
                            option(value="New cases (per day)") New cases (per day)
                            option(value="Recovered (per day)") Recovered (per day)
                            option(value="# ICU (on the day)") # ICU (on the day)
                        optgroup(label="Totals")
                            option(value="Total dormitory cases") Total dormitory cases
                            option(value="Total work permit holder cases") Total work permit holder cases
                            option(value="Total local community cases") Total local community cases
                            option(value="Total local") Total local
                            option(value="Total imported") Total imported
                            option(value="Total cases") Total cases
                            option(value="Total recovered") Total recovered
                            option(value="# still in hospital") # still in hospital
                        br
                
                .advanced(id="show-advanced").hide
                    p To perform calculations involving a constant, type the number into the text field and press the "+" symbol.
                    //- .advanced-row-1
                    .advanced-series
                        h4 Series 1

                        .top
                            select(id="advanced-select-top-1")      
                                optgroup(label="Dailies")
                                    option(data-placeholder="true")   
                                    option(value="New local dormitory cases (per day)") New local dormitory cases (per day)
                                    option(value="New local work permit holder cases (per day)") New local work permit holder cases (per day)
                                    option(value="New local community cases (per day)") New local community cases (per day)
                                    option(value="New local cases (per day)") New local cases (per day)
                                    option(value="New imported cases(per day)") New imported cases(per day)
                                    option(value="New cases (per day)") New cases (per day)
                                    option(value="Recovered (per day)") Recovered (per day)
                                    option(value="# ICU (on the day)") # ICU (on the day)
                                optgroup(label="Totals")
                                    option(value="Total dormitory cases") Total dormitory cases
                                    option(value="Total work permit holder cases") Total work permit holder cases
                                    option(value="Total local community cases") Total local community cases
                                    option(value="Total local") Total local
                                    option(value="Total imported") Total imported
                                    option(value="Total cases") Total cases
                                    option(value="Total recovered") Total recovered
                                    option(value="# still in hospital") # still in hospital
                        .operation
                            select(id='advanced-select-operation-1')
                                option(data-placeholder="true")   
                                option(value='add') + (add)
                                option(value='subtract') - (subtract)
                                option(value='multiply') ร (multiply)
                                option(value='divide') รท (divide)
                        .bottom
                            select(id="advanced-select-bottom-1")   
                                optgroup(label="Dailies")
                                    option(data-placeholder="true")   
                                    option(value="New local dormitory cases (per day)") New local dormitory cases (per day)
                                    option(value="New local work permit holder cases (per day)") New local work permit holder cases (per day)
                                    option(value="New local community cases (per day)") New local community cases (per day)
                                    option(value="New local cases (per day)") New local cases (per day)
                                    option(value="New imported cases(per day)") New imported cases(per day)
                                    option(value="New cases (per day)") New cases (per day)
                                    option(value="Recovered (per day)") Recovered (per day)
                                    option(value="# ICU (on the day)") # ICU (on the day)
                                optgroup(label="Totals")
                                    option(value="Total dormitory cases") Total dormitory cases
                                    option(value="Total work permit holder cases") Total work permit holder cases
                                    option(value="Total local community cases") Total local community cases
                                    option(value="Total local") Total local
                                    option(value="Total imported") Total imported
                                    option(value="Total cases") Total cases
                                    option(value="Total recovered") Total recovered
                                    option(value="# still in hospital") # still in hospital
                    .advanced-series
                        h4 Series 2
                        p.hide(id="series-2") placeholder
                        .top
                            select(id="advanced-select-top-2")      
                                optgroup(label="Dailies")
                                    option(data-placeholder="true")   
                                    option(value="New local dormitory cases (per day)") New local dormitory cases (per day)
                                    option(value="New local work permit holder cases (per day)") New local work permit holder cases (per day)
                                    option(value="New local community cases (per day)") New local community cases (per day)
                                    option(value="New local cases (per day)") New local cases (per day)
                                    option(value="New imported cases(per day)") New imported cases(per day)
                                    option(value="New cases (per day)") New cases (per day)
                                    option(value="Recovered (per day)") Recovered (per day)
                                    option(value="# ICU (on the day)") # ICU (on the day)
                                optgroup(label="Totals")
                                    option(value="Total dormitory cases") Total dormitory cases
                                    option(value="Total work permit holder cases") Total work permit holder cases
                                    option(value="Total local community cases") Total local community cases
                                    option(value="Total local") Total local
                                    option(value="Total imported") Total imported
                                    option(value="Total cases") Total cases
                                    option(value="Total recovered") Total recovered
                                    option(value="# still in hospital") # still in hospital
                        .operation
                            select(id='advanced-select-operation-2')
                                option(data-placeholder="true")   
                                option(value='add') + (add)
                                option(value='subtract') - (subtract)
                                option(value='multiply') ร (multiply)
                                option(value='divide') รท (divide)
                        .bottom    
                            select(id="advanced-select-bottom-2")   
                                optgroup(label="Dailies")
                                    option(data-placeholder="true")   
                                    option(value="New local dormitory cases (per day)") New local dormitory cases (per day)
                                    option(value="New local work permit holder cases (per day)") New local work permit holder cases (per day)
                                    option(value="New local community cases (per day)") New local community cases (per day)
                                    option(value="New local cases (per day)") New local cases (per day)
                                    option(value="New imported cases(per day)") New imported cases(per day)
                                    option(value="New cases (per day)") New cases (per day)
                                    option(value="Recovered (per day)") Recovered (per day)
                                    option(value="# ICU (on the day)") # ICU (on the day)
                                optgroup(label="Totals")
                                    option(value="Total dormitory cases") Total dormitory cases
                                    option(value="Total work permit holder cases") Total work permit holder cases
                                    option(value="Total local community cases") Total local community cases
                                    option(value="Total local") Total local
                                    option(value="Total imported") Total imported
                                    option(value="Total cases") Total cases
                                    option(value="Total recovered") Total recovered
                                    option(value="# still in hospital") # still in hospital
                    .advanced-series
                        h4 Series 3
                        p.hide(id="series-3") placeholder
                        .top
                            select(id="advanced-select-top-3")      
                                optgroup(label="Dailies")
                                    option(data-placeholder="true")   
                                    option(value="New local dormitory cases (per day)") New local dormitory cases (per day)
                                    option(value="New local work permit holder cases (per day)") New local work permit holder cases (per day)
                                    option(value="New local community cases (per day)") New local community cases (per day)
                                    option(value="New local cases (per day)") New local cases (per day)
                                    option(value="New imported cases(per day)") New imported cases(per day)
                                    option(value="New cases (per day)") New cases (per day)
                                    option(value="Recovered (per day)") Recovered (per day)
                                    option(value="# ICU (on the day)") # ICU (on the day)
                                optgroup(label="Totals")
                                    option(value="Total dormitory cases") Total dormitory cases
                                    option(value="Total work permit holder cases") Total work permit holder cases
                                    option(value="Total local community cases") Total local community cases
                                    option(value="Total local") Total local
                                    option(value="Total imported") Total imported
                                    option(value="Total cases") Total cases
                                    option(value="Total recovered") Total recovered
                                    option(value="# still in hospital") # still in hospital
                        .operation
                            select(id='advanced-select-operation-3')
                                option(data-placeholder="true")   
                                option(value='add') + (add)
                                option(value='subtract') - (subtract)
                                option(value='multiply') ร (multiply)
                                option(value='divide') รท (divide)
                        .bottom    
                            select(id="advanced-select-bottom-3")   
                                optgroup(label="Dailies")
                                    option(data-placeholder="true")   
                                    option(value="New local dormitory cases (per day)") New local dormitory cases (per day)
                                    option(value="New local work permit holder cases (per day)") New local work permit holder cases (per day)
                                    option(value="New local community cases (per day)") New local community cases (per day)
                                    option(value="New local cases (per day)") New local cases (per day)
                                    option(value="New imported cases(per day)") New imported cases(per day)
                                    option(value="New cases (per day)") New cases (per day)
                                    option(value="Recovered (per day)") Recovered (per day)
                                    option(value="# ICU (on the day)") # ICU (on the day)
                                optgroup(label="Totals")
                                    option(value="Total dormitory cases") Total dormitory cases
                                    option(value="Total work permit holder cases") Total work permit holder cases
                                    option(value="Total local community cases") Total local community cases
                                    option(value="Total local") Total local
                                    option(value="Total imported") Total imported
                                    option(value="Total cases") Total cases
                                    option(value="Total recovered") Total recovered
                                    option(value="# still in hospital") # still in hospital
                    //- .advanced-row-2    
                    .advanced-series
                        h4 Series 4
                        p.hide(id="series-4") placeholder
                        .top
                            select(id="advanced-select-top-4")      
                                optgroup(label="Dailies")
                                    option(data-placeholder="true")   
                                    option(value="New local dormitory cases (per day)") New local dormitory cases (per day)
                                    option(value="New local work permit holder cases (per day)") New local work permit holder cases (per day)
                                    option(value="New local community cases (per day)") New local community cases (per day)
                                    option(value="New local cases (per day)") New local cases (per day)
                                    option(value="New imported cases(per day)") New imported cases(per day)
                                    option(value="New cases (per day)") New cases (per day)
                                    option(value="Recovered (per day)") Recovered (per day)
                                    option(value="# ICU (on the day)") # ICU (on the day)
                                optgroup(label="Totals")
                                    option(value="Total dormitory cases") Total dormitory cases
                                    option(value="Total work permit holder cases") Total work permit holder cases
                                    option(value="Total local community cases") Total local community cases
                                    option(value="Total local") Total local
                                    option(value="Total imported") Total imported
                                    option(value="Total cases") Total cases
                                    option(value="Total recovered") Total recovered
                                    option(value="# still in hospital") # still in hospital
                        .operation
                            select(id='advanced-select-operation-4')
                                option(data-placeholder="true")   
                                option(value='add') + (add)
                                option(value='subtract') - (subtract)
                                option(value='multiply') ร (multiply)
                                option(value='divide') รท (divide)
                        .bottom    
                            select(id="advanced-select-bottom-4")   
                                optgroup(label="Dailies")
                                    option(data-placeholder="true")   
                                    option(value="New local dormitory cases (per day)") New local dormitory cases (per day)
                                    option(value="New local work permit holder cases (per day)") New local work permit holder cases (per day)
                                    option(value="New local community cases (per day)") New local community cases (per day)
                                    option(value="New local cases (per day)") New local cases (per day)
                                    option(value="New imported cases(per day)") New imported cases(per day)
                                    option(value="New cases (per day)") New cases (per day)
                                    option(value="Recovered (per day)") Recovered (per day)
                                    option(value="# ICU (on the day)") # ICU (on the day)
                                optgroup(label="Totals")
                                    option(value="Total dormitory cases") Total dormitory cases
                                    option(value="Total work permit holder cases") Total work permit holder cases
                                    option(value="Total local community cases") Total local community cases
                                    option(value="Total local") Total local
                                    option(value="Total imported") Total imported
                                    option(value="Total cases") Total cases
                                    option(value="Total recovered") Total recovered
                                    option(value="# still in hospital") # still in hospital
                    .advanced-series
                        h4 Series 5
                        p.hide(id="series-5") placeholder
                        .top
                            select(id="advanced-select-top-5")      
                                optgroup(label="Dailies")
                                    option(data-placeholder="true")   
                                    option(value="New local dormitory cases (per day)") New local dormitory cases (per day)
                                    option(value="New local work permit holder cases (per day)") New local work permit holder cases (per day)
                                    option(value="New local community cases (per day)") New local community cases (per day)
                                    option(value="New local cases (per day)") New local cases (per day)
                                    option(value="New imported cases(per day)") New imported cases(per day)
                                    option(value="New cases (per day)") New cases (per day)
                                    option(value="Recovered (per day)") Recovered (per day)
                                    option(value="# ICU (on the day)") # ICU (on the day)
                                optgroup(label="Totals")
                                    option(value="Total dormitory cases") Total dormitory cases
                                    option(value="Total work permit holder cases") Total work permit holder cases
                                    option(value="Total local community cases") Total local community cases
                                    option(value="Total local") Total local
                                    option(value="Total imported") Total imported
                                    option(value="Total cases") Total cases
                                    option(value="Total recovered") Total recovered
                                    option(value="# still in hospital") # still in hospital
                        .operation
                            select(id='advanced-select-operation-5')
                                option(data-placeholder="true")   
                                option(value='add') + (add)
                                option(value='subtract') - (subtract)
                                option(value='multiply') ร (multiply)
                                option(value='divide') รท (divide)
                        .bottom    
                            select(id="advanced-select-bottom-5")   
                                optgroup(label="Dailies")
                                    option(data-placeholder="true")   
                                    option(value="New local dormitory cases (per day)") New local dormitory cases (per day)
                                    option(value="New local work permit holder cases (per day)") New local work permit holder cases (per day)
                                    option(value="New local community cases (per day)") New local community cases (per day)
                                    option(value="New local cases (per day)") New local cases (per day)
                                    option(value="New imported cases(per day)") New imported cases(per day)
                                    option(value="New cases (per day)") New cases (per day)
                                    option(value="Recovered (per day)") Recovered (per day)
                                    option(value="# ICU (on the day)") # ICU (on the day)
                                optgroup(label="Totals")
                                    option(value="Total dormitory cases") Total dormitory cases
                                    option(value="Total work permit holder cases") Total work permit holder cases
                                    option(value="Total local community cases") Total local community cases
                                    option(value="Total local") Total local
                                    option(value="Total imported") Total imported
                                    option(value="Total cases") Total cases
                                    option(value="Total recovered") Total recovered
                                    option(value="# still in hospital") # still in hospital          
                    .advanced-series
                        h4 Series 6
                        p.hide(id="series-6") placeholder
                        .top
                            select(id="advanced-select-top-6")      
                                optgroup(label="Dailies")
                                    option(data-placeholder="true")   
                                    option(value="New local dormitory cases (per day)") New local dormitory cases (per day)
                                    option(value="New local work permit holder cases (per day)") New local work permit holder cases (per day)
                                    option(value="New local community cases (per day)") New local community cases (per day)
                                    option(value="New local cases (per day)") New local cases (per day)
                                    option(value="New imported cases(per day)") New imported cases(per day)
                                    option(value="New cases (per day)") New cases (per day)
                                    option(value="Recovered (per day)") Recovered (per day)
                                    option(value="# ICU (on the day)") # ICU (on the day)
                                optgroup(label="Totals")
                                    option(value="Total dormitory cases") Total dormitory cases
                                    option(value="Total work permit holder cases") Total work permit holder cases
                                    option(value="Total local community cases") Total local community cases
                                    option(value="Total local") Total local
                                    option(value="Total imported") Total imported
                                    option(value="Total cases") Total cases
                                    option(value="Total recovered") Total recovered
                                    option(value="# still in hospital") # still in hospital
                        .operation
                            select(id='advanced-select-operation-6')
                                option(data-placeholder="true")   
                                option(value='add') + (add)
                                option(value='subtract') - (subtract)
                                option(value='multiply') ร (multiply)
                                option(value='divide') รท (divide)
                        .bottom  
                            select(id="advanced-select-bottom-6")   
                                optgroup(label="Dailies")
                                    option(data-placeholder="true")   
                                    option(value="New local dormitory cases (per day)") New local dormitory cases (per day)
                                    option(value="New local work permit holder cases (per day)") New local work permit holder cases (per day)
                                    option(value="New local community cases (per day)") New local community cases (per day)
                                    option(value="New local cases (per day)") New local cases (per day)
                                    option(value="New imported cases(per day)") New imported cases(per day)
                                    option(value="New cases (per day)") New cases (per day)
                                    option(value="Recovered (per day)") Recovered (per day)
                                    option(value="# ICU (on the day)") # ICU (on the day)
                                optgroup(label="Totals")
                                    option(value="Total dormitory cases") Total dormitory cases
                                    option(value="Total work permit holder cases") Total work permit holder cases
                                    option(value="Total local community cases") Total local community cases
                                    option(value="Total local") Total local
                                    option(value="Total imported") Total imported
                                    option(value="Total cases") Total cases
                                    option(value="Total recovered") Total recovered
                                    option(value="# still in hospital") # still in hospital
               
                .create-btn-ctn
                    .button-wrapper(onclick="clearAll()")
                        a(class="styled") Clear all selections 
                        i(class="fas fa-eraser")
                h3 Select graph options
                select(id="graph-options" multiple)
                    option(data-placeholder="true")   
                    option(value="log") Enable logarithmic y-axis
                    option(value="moving-average" id='moving-average') Draw moving average lines (average of past x days)
                    option(value='linear') Draw linear regression line (y = ax + b)
                    option(value='exponential') Draw exponential regression line (y = ae^(bx))
                    option(value='logarithmic') Draw logarithmic regression line (y = a + bln(x))
                    option(value='power') Draw power regression line (y = ax^b)
                    option(value='polynomial' id='polynomial') Draw polynomial regression line 
                    option(value='look-forward' id='look-forward') Extrapolate x days
                .create-btn-ctn
                    .button-wrapper(onclick="clearOpts()")
                        a(class="styled") Clear graph options
                        i(class="fas fa-eraser")
            .axis-selector
                h3 y-axis: Case Numbers
                h3 x-axis: Time

            
            .create-btn-ctn(class="right")
                
                .button-wrapper(onclick="generateChart()")
                    a(class="styled") Generate graph 
                    i(class="fas fa-grip-lines" id='animate2')

        #chart-container(class="chart")
        .copy-text(id="hidden")
            p Share this graph!
            .create-btn-ctn                
                .button-wrapper(onclick="copy()")
                    a(class="styled" id='link-url') <i class="far fa-copy"></i>
            p Please note: Graphs involving numbers currently cannot be shared via a link. Download the graph instead.
            
            input(type="text" id="link-url-copy" readonly style="opacity: 0; cursor: default")
            
    
        
    
    script(src="https://cdnjs.cloudflare.com/ajax/libs/regression/1.4.0/regression.min.js" integrity="sha256-shrQYVCltYlBHywosRi5na09S7Qru6QCOCV1c5EgJ6c=" crossorigin="anonymous")
    //- https://bl.ocks.org/daluu/5bb59ef3f3fed3de227535da367649ba
    
    script.
        
        

        var charts = document.getElementsByClassName("chart")
        if(window.innerHeight > window.innerWidth){ // Portrait
            var charts = document.getElementsByClassName("chart")
            for (var i = 0; i < charts.length; i++) { 
                charts[i].style.height = "800px"                    
            }
        }   
        var query = window.matchMedia("(orientation:landscape)")
        function screenTest(e) { 
            var charts = document.getElementsByClassName("chart")
            
            if (!e.matches) { 
                for (var i = 0; i < charts.length; i++) { 
                    charts[i].style.height = "800px"                    
                }
                
            } else { 
                for (var i = 0; i < charts.length; i++) { 
                    charts[i].style.height = "45vw"                    
                }   
            }
        }
        query.addListener(screenTest)
        
        
        
        
        
        
        
        
        
        var animate = document.getElementById('animate')      
        function startAnimation() { 
            animate.className = "fas fa-angle-double-left"             
        }
        function stopAnimation() { 
            animate.className = "fas fa-angle-left"
        }
        // Regression Power Selector
        var power = 4
        var powerInputted = false
        // Moving average time selector
        var lookBackTime = 7
        var LBTinputted = false
        // look forward
        var lookForward = 0
        var LFinputted = false
        var select = new SlimSelect({
            select: "#series-compare",
            
            placeholder: 'Select series...',
            closeOnSelect: false,
            selectByGroup: true,
            searchFocus: false,
            showContent: 'down'
            
        })
        alertify.set('notifier','position', 'bottom-left');
        var select2SelectedOld = []
        var select2SelectedNew = []
        var select2 = new SlimSelect({
            select: "#graph-options",
            placeholder: 'Select options...',
            closeOnSelect: false,
            selectByGroup: true,
            searchFocus: false,
            showContent: 'down',
            beforeOnChange: (select) => { 
                // alertify
               



                var temp = select.map(e => e.value)
                
                select2SelectedNew = temp;
                var change = select2SelectedNew.filter(x => !select2SelectedOld.includes(x)).concat(select2SelectedOld.filter(x => !select2SelectedNew.includes(x)));
                
                if (change.includes("moving-average")) { 
                    LBTinputted = false                    
                }
                if (change.includes("polynomial")) {
                    powerInputted = false                    
                }
                if (change.includes("look-forward")) { 
                    LFinputted = false
                }
                select2SelectedOld = temp

                
                var promptAverage = false;
                var promptPoly = false;
                var promptLF = false
                select.forEach(selection => { 
                    if (selection.value == "moving-average" && !LBTinputted) { 
                        promptAverage = true
                        
                    }
                    if (selection.value == "polynomial" && !powerInputted) { 
                        promptPoly = true
                    }
                    if (selection.value == "look-forward" && !LFinputted) { 
                        promptLF = true
                    }

                })
                    
                var cancelled = false;
                if (promptAverage) { 
                    alertify.prompt("Moving Average takes the last x days and calculates the average of them. <br />Enter the number of days (1 - 50) to calculate the average from.", "7", 
                        function(evt, value) { 
                            if (isNaN(value) || value > 50 || value == 0) { 
                                alertify.error(`Please only input a number from 1 to 50.`)   
                                return false                             
                            } else { 
                                alertify.success(`Set to ${value} days.`)
                                lookBackTime = value
                                LBTinputted = true
                                
                            }
                            
                        },
                        function() { 
                            alertify.error("Moving Average time not set; line will not be drawn")
                            
                            select2.set(select.splice(select.indexOf('moving-average'), 1))
                        }
                    ).setHeader('Moving Average')
                }
                if (promptPoly) { 
                    alertify.prompt("Enter the maximum power (1 - 20) of the regression polynomial. ", "4", 
                        function(evt, value) { 
                            if (isNaN(value) || value > 20 || value == 0) { 
                                alertify.error(`Please only input a number from 1 to 20.`) 
                                return false                                   
                            } else { 
                                alertify.success(`Power set to ${value}.`)
                                power = value
                                powerInputted = true
                               
                            }
                            
                        },
                        function() { 
                            alertify.error("Power not set; line will not be drawn")
                            
                            select2.set(select.splice(select.indexOf('power'), 1))
                        }
                    ).setHeader('Power polynomial')
                }
                if (promptLF) { 
                    alertify.prompt("Enter the number of days to extrapolate. Enter a number from 1 to 500. <br />Note that you will need to select a regression line to extrapolate.", "7", 
                        function(evt, value) { 
                            if (isNaN(value) || value > 500 || value == 0) { 
                                alertify.error(`Please only input a number from 1 to 500.`)   
                                return false                             
                            } else { 
                                alertify.success(`Set to ${value} days.`)
                                lookForward = value
                                LFinputted = true
                                
                            }
                            
                        },
                        function() { 
                            alertify.error("Days to extrapolate not given. Days will not be extrapolated.")
                            
                            select2.set(select.splice(select.indexOf('look-forward'), 1))
                        }
                    ).setHeader('Data Extrapolation')
                }
                
                

            }
        })
        var series = !{stringify(series)}

        
        if (series) { 
            
            var index = ["New local dormitory cases (per day)", "New local work permit holder cases (per day)", "New local community cases (per day)", "New local cases (per day)", "New imported cases(per day)", "New cases (per day)", "Total dormitory cases", "Total work permit holder cases", "Total local community cases", "Total local", "Total imported", "Total cases", "Recovered (per day)", "Total recovered", "# ICU (on the day)", "# still in hospital"]
            var selectedSeries = []
            var series = series.split("_")
            
            for (var i = 0; i < series.length; i++) { 
                selectedSeries.push(index[series[i]])
            }
            generateChart(selectedSeries)
        }
        
        function copy() {
            /* Get the text field */
            var copyText = document.getElementById("link-url-copy");

            /* Select the text field */
            copyText.focus()
            copyText.select();
            //- copyText.setSelectionRange(0, 99999); /*For mobile devices*/

            /* Copy the text inside the text field */
            document.execCommand("copy");

            /* Alert the copied text */
            document.getElementById('animate3').className = "far fa-clipboard"
            alertify.success('Copied to clipboard!')

        }
        // User clicks on advanced options
        // - Action: Reveal advanced options       
        const addArray = arr => arr.reduce((a, b) => Number(a) + Number(b), 0);
        
        
        // User selects USER INPUT for both
        // - Popup saying can only select user input once (OR disable)
        // User clicks on Generate
        // - Loop through advanced options. If input not empty, do math
        // - Validate the user input
        var isAdv = false
        function showAdv() { 
            if (!isAdv) { 
                document.getElementById("show-advanced").style.display = "block"
                document.getElementById("advEasy").innerHTML = "Use simple mode"
                document.getElementById("select-hider").style.display = "none"
                isAdv = true
            } else { 
                document.getElementById("show-advanced").style.display = "none"
                document.getElementById("advEasy").innerHTML = "Use advanced mode"
                isAdv = false
                document.getElementById("select-hider").style.display = "block"
            }
            
            
            
        }
        
        function clearAll() {
            advancedSelectTop1.set([])
            advancedSelectOperation1.set([])
            advancedSelectBottom1.set([])
            advancedSelectTop2.set([])
            advancedSelectOperation2.set([])
            advancedSelectBottom2.set([])
            advancedSelectTop3.set([])
            advancedSelectOperation3.set([])
            advancedSelectBottom3.set([])
            advancedSelectTop4.set([])
            advancedSelectOperation4.set([])
            advancedSelectBottom4.set([])
            advancedSelectTop5.set([])
            advancedSelectOperation5.set([])
            advancedSelectBottom5.set([])
            advancedSelectTop6.set([])
            advancedSelectOperation6.set([])
            advancedSelectBottom6.set([])       
            select.set([])
        }
        function clearOpts() { 
            select2.set([])
            LBTinputted = false
            powerInputted = false
        }        
        var commonSelectOpts = { 
            searchPlaceholder: 'Search, or enter a number to perform operations on',
            placeholder: 'Select series or enter number...',
            deselectLabel: '<span class="red">โ</span>',
            showContent: 'down',
            searchFocus: false,
            allowDeselect: true,
            addable: function (value) { 
                if (!Number(value)) { // if NaN
                    alert("Please only add a number!")
                    return false
                }
                return value
            }
        }
        
        var advancedSelectTop1 = new SlimSelect({ 
            select: "#advanced-select-top-1",
            searchPlaceholder: commonSelectOpts.searchPlaceholder,
            placeholder: commonSelectOpts.placeholder,
            addable: commonSelectOpts.addable,
            deselectLabel: commonSelectOpts.deselectLabel,
            searchFocus: commonSelectOpts.searchFocus,
            showContent: commonSelectOpts.showContent,
            allowDeselect: commonSelectOpts.allowDeselect
        })
        var advancedSelectOperation1 = new SlimSelect({
            select: "#advanced-select-operation-1", 
            showSearch: false,
            placeholder: "Select operation...",
            deselectLabel: commonSelectOpts.deselectLabel,
            searchFocus: commonSelectOpts.searchFocus,
            showContent: commonSelectOpts.showContent,
            allowDeselect: commonSelectOpts.allowDeselect
        })
        var advancedSelectBottom1 = new SlimSelect({
            select: "#advanced-select-bottom-1",
            searchPlaceholder: commonSelectOpts.searchPlaceholder,
            placeholder: commonSelectOpts.placeholder,
            addable: commonSelectOpts.addable,
            deselectLabel: commonSelectOpts.deselectLabel,
            searchFocus: commonSelectOpts.searchFocus,
            showContent: commonSelectOpts.showContent,
            allowDeselect: commonSelectOpts.allowDeselect
            
        })
        var advancedSelectTop2 = new SlimSelect({ 
            select: "#advanced-select-top-2",
            searchPlaceholder: commonSelectOpts.searchPlaceholder,
            placeholder: commonSelectOpts.placeholder,
            addable: commonSelectOpts.addable,
            deselectLabel: commonSelectOpts.deselectLabel,
            searchFocus: commonSelectOpts.searchFocus,
            showContent: commonSelectOpts.showContent,
            allowDeselect: commonSelectOpts.allowDeselect
        })
        var advancedSelectOperation2 = new SlimSelect({
            select: "#advanced-select-operation-2", 
            showSearch: false,
            placeholder: "Select operation...",
            deselectLabel: commonSelectOpts.deselectLabel,
            searchFocus: commonSelectOpts.searchFocus,
            showContent: commonSelectOpts.showContent,
            allowDeselect: commonSelectOpts.allowDeselect
        })
        var advancedSelectBottom2 = new SlimSelect({
            select: "#advanced-select-bottom-2",
            searchPlaceholder: commonSelectOpts.searchPlaceholder,
            placeholder: commonSelectOpts.placeholder,
            addable: commonSelectOpts.addable,
            searchFocus: commonSelectOpts.searchFocus,
            showContent: commonSelectOpts.showContent,
            allowDeselect: commonSelectOpts.allowDeselect
        })
        var advancedSelectTop3 = new SlimSelect({ 
            select: "#advanced-select-top-3",
            searchPlaceholder: commonSelectOpts.searchPlaceholder,
            placeholder: commonSelectOpts.placeholder,
            addable: commonSelectOpts.addable,
            searchFocus: commonSelectOpts.searchFocus,
            showContent: commonSelectOpts.showContent,
            allowDeselect: commonSelectOpts.allowDeselect
        })
        var advancedSelectOperation3 = new SlimSelect({
            select: "#advanced-select-operation-3", 
            showSearch: false,
            placeholder: "Select operation...",
            searchFocus: commonSelectOpts.searchFocus,
            showContent: commonSelectOpts.showContent,
            allowDeselect: commonSelectOpts.allowDeselect
        })
        var advancedSelectBottom3 = new SlimSelect({
            select: "#advanced-select-bottom-3",
            searchPlaceholder: commonSelectOpts.searchPlaceholder,
            placeholder: commonSelectOpts.placeholder,
            addable: commonSelectOpts.addable,
            searchFocus: commonSelectOpts.searchFocus,
            showContent: commonSelectOpts.showContent,
            allowDeselect: commonSelectOpts.allowDeselect
        })
        var advancedSelectTop4 = new SlimSelect({ 
            select: "#advanced-select-top-4",
            searchPlaceholder: commonSelectOpts.searchPlaceholder,
            placeholder: commonSelectOpts.placeholder,
            addable: commonSelectOpts.addable,
            searchFocus: commonSelectOpts.searchFocus,
            showContent: commonSelectOpts.showContent,
            allowDeselect: commonSelectOpts.allowDeselect
        })
        var advancedSelectOperation4 = new SlimSelect({
            select: "#advanced-select-operation-4", 
            showSearch: false,
            placeholder: "Select operation...",
            searchFocus: commonSelectOpts.searchFocus,
            showContent: commonSelectOpts.showContent,
            allowDeselect: commonSelectOpts.allowDeselect
        })
        var advancedSelectBottom4 = new SlimSelect({
            select: "#advanced-select-bottom-4",
            searchPlaceholder: commonSelectOpts.searchPlaceholder,
            placeholder: commonSelectOpts.placeholder,
            addable: commonSelectOpts.addable,
            searchFocus: commonSelectOpts.searchFocus,
            showContent: commonSelectOpts.showContent,
            allowDeselect: commonSelectOpts.allowDeselect
        })
        var advancedSelectTop5 = new SlimSelect({ 
            select: "#advanced-select-top-5",
            searchPlaceholder: commonSelectOpts.searchPlaceholder,
            placeholder: commonSelectOpts.placeholder,
            addable: commonSelectOpts.addable,
            searchFocus: commonSelectOpts.searchFocus,
            showContent: commonSelectOpts.showContent,
            allowDeselect: commonSelectOpts.allowDeselect
        })
        var advancedSelectOperation5 = new SlimSelect({
            select: "#advanced-select-operation-5", 
            showSearch: false,
            placeholder: "Select operation...",
            searchFocus: commonSelectOpts.searchFocus,
            showContent: commonSelectOpts.showContent,
            allowDeselect: commonSelectOpts.allowDeselect
        })
        var advancedSelectBottom5 = new SlimSelect({
            select: "#advanced-select-bottom-5",
            searchPlaceholder: commonSelectOpts.searchPlaceholder,
            placeholder: commonSelectOpts.placeholder,
            addable: commonSelectOpts.addable,
            searchFocus: commonSelectOpts.searchFocus,
            showContent: commonSelectOpts.showContent,
            allowDeselect: commonSelectOpts.allowDeselect
        })
        var advancedSelectTop6 = new SlimSelect({ 
            select: "#advanced-select-top-6",
            searchPlaceholder: commonSelectOpts.searchPlaceholder,
            placeholder: commonSelectOpts.placeholder,
            addable: commonSelectOpts.addable,
            searchFocus: commonSelectOpts.searchFocus,
            showContent: commonSelectOpts.showContent,
            allowDeselect: commonSelectOpts.allowDeselect
        })
        var advancedSelectOperation6 = new SlimSelect({
            select: "#advanced-select-operation-6", 
            showSearch: false,
            placeholder: "Select operation...",
            searchFocus: commonSelectOpts.searchFocus,
            showContent: commonSelectOpts.showContent,
            allowDeselect: commonSelectOpts.allowDeselect
        })
        var advancedSelectBottom6 = new SlimSelect({
            select: "#advanced-select-bottom-6",
            searchPlaceholder: commonSelectOpts.searchPlaceholder,
            placeholder: commonSelectOpts.placeholder,
            addable: commonSelectOpts.addable,
            searchFocus: commonSelectOpts.searchFocus,
            showContent: commonSelectOpts.showContent,
            allowDeselect: commonSelectOpts.allowDeselect
        })
        var slimSelectGrouping = [
            [advancedSelectTop1, advancedSelectOperation1, advancedSelectBottom1],
            [advancedSelectTop2, advancedSelectOperation2, advancedSelectBottom2],
            [advancedSelectTop3, advancedSelectOperation3, advancedSelectBottom3],
            [advancedSelectTop4, advancedSelectOperation4, advancedSelectBottom4],
            [advancedSelectTop5, advancedSelectOperation5, advancedSelectBottom5],
            [advancedSelectTop6, advancedSelectOperation6, advancedSelectBottom6],           
        ]

        // URL stuff
        var index = ["New local dormitory cases (per day)", "New local work permit holder cases (per day)", "New local community cases (per day)", "New local cases (per day)", "New imported cases(per day)", "New cases (per day)", "Total dormitory cases", "Total work permit holder cases", "Total local community cases", "Total local", "Total imported", "Total cases", "Recovered (per day)", "Total recovered", "# ICU (on the day)", "# still in hospital"]
        var operators = {
            "a": "add",
            "s": "subtract",
            "m": "multiply",
            "d": "divide"
        }
        var operatorIndex = {
                "add": "a",
                "subtract": "s",
                "multiply": "m",
                "divide": "d"
        }   
        
        var darkMode = false
        var theme = "fusion"
        var cookie = !{stringify(cookie)}
        if (cookie) { 
            if (cookie.dark_mode == "true") {
                
                darkMode = true
                theme = "candy"
                document.getElementById("dark-mode-text").innerHTML = "Disable dark mode"
                document.getElementsByTagName("BODY")[0].classList.toggle("dark")
            }
        }

        function toggleDarkMode() { 
            document.getElementsByTagName("BODY")[0].classList.toggle("dark")      
            var obj = FusionCharts.items
            if (!darkMode) { 
                // if not darkMode
                darkMode = true;
                theme = "candy"
                if (!(Object.keys(obj).length === 0 && obj.constructor === Object)) {                    
                    FusionCharts.items[Object.keys(FusionCharts.items)[0]].setChartAttribute("theme", "candy")
                }              
                // set cookie
                document.cookie = "dark_mode = true"
                document.getElementById("dark-mode-text").innerHTML = "Disable dark mode"
            } else { 
                darkMode = false
                theme = "fusion"
                if (!(Object.keys(obj).length === 0 && obj.constructor === Object)) {
                    FusionCharts.items[Object.keys(FusionCharts.items)[0]].setChartAttribute("theme", "fusion") 
                }
                               
                // set cookie
                document.cookie = "dark_mode = false"
                document.getElementById("dark-mode-text").innerHTML = "Enable dark mode"
            }
        }
        
        
        function formatDates(date) {   
            var t = date.split(" ")
            var a = t[2].split("")
            var b = a[0] == 0 ? a[1] : a.join("")
            var c = `${t[3].split("")[2]}${t[3].split("")[3]}`
            return `${b}-${t[1]}-${c}`
        }

        function generateChart(selectedSeries) {
            
            // html editing
            var animate2 = document.getElementById('animate2')
            animate2.className = "fas fa-grip-lines-vertical"


            // stuff for URL generation              
            var URLArray = [] 
            var URLString;

            // This code is for moving average calculating
            var totalOfLast = []
            
            // End

            // This code is for regression
            var possibleRegressions = ['linear', 'exponential', 'logarithmic', 'power', 'polynomial']
            var regressionSelected = select2.selected().some(r=> possibleRegressions.includes(r)) // https://stackoverflow.com/questions/16312528/check-if-an-array-contains-any-element-of-another-array-in-javascript/29447130
                                
            
            
           
            
            var dateIndex = []
            



            var rows = !{stringify(rows)}
            var data = []



            // Generate schema
            var schema = [{
                "name": "Time", // x
                "type": "date",
                "format": "%-d-%b-%y"
            }, { 
                "name": "Type",
                "type": "string"
            }, { 
                "name": "Case Numbers",
                "type": "number"
            }]


            // FIRST CHECK IF ADVANCED MODE    
                 
            if (isAdv) { 
                // is Advanced mode
                // 1) Data validation: Iterate through all slimselects and check if they fufil this criteria
                // a) If TOP select not filled, skip 
                // b) If ALL select filled, save this data
                // c) If TOP selected filled but BOTH operator and bottom select NOT FILLED, save this data
                // d) Else, alert()
                
                
                slimSelectGrouping.forEach(group => { 
                    var regressionData = [] // regression 
                    var dataPresentCheck = false

                    // a)
                    if (!group[0].selected()) { // This is the first selection
                        // If the first selection is EMPTY, SKIP
                        URLArray.push("-1", "-1", "-1")
                        return                        
                    } 
                    // from here on below, we know that the top selection is filled.
                    // c) 
                    if ((!group[1].selected() && group[2].selected()) || (group[1].selected() && !group[2].selected())) { // bottom 2 must either be BOTH FILLED or BOTH EMPTY
                        URLArray.push("-1", "-1", "-1")                      
                        return
                    }

                    
                    //- if (Number(topSelection) && Number(bottomSelection)) { // if both top and bottom are numbers not possible to plot right lol
                    //-     return
                    //- }
                    // From here, either i) only top is filled ii) all 3 are filled
                   

                    var topSelection = group[0].selected()
                    var operatorSelection = group[1].selected() || "add"
                    var bottomSelection = group[2].selected() || "none"

                    URLArray.push(index.indexOf(topSelection), operatorIndex[operatorSelection], index.indexOf(bottomSelection)) 
                    
                    var operationDictionary = {
                        add: "+",
                        subtract: "-",
                        multiply: "ร",
                        divide: "รท"
                    }

                    var seriesName = ''

                    for (var i = 0; i < rows.length; i++) { 
                        // each row is rows[i]
                        var value;
                        if (bottomSelection != "none") {
                            if (!isNaN(topSelection) && !isNaN(bottomSelection)) { 
                                switch (operatorSelection) { 
                                    case "add": 
                                        value = Number(topSelection) + Number(bottomSelection)
                                        break;
                                    case "subtract":
                                        value = Number(topSelection) - Number(bottomSelection)
                                        break;
                                    case "multiply": 
                                        value = Number(topSelection) * Number(bottomSelection)
                                        break;
                                    case "divide":
                                        value = Number(topSelection) / Number(bottomSelection)
                                        break;
                                }                                                
                            } else if (!isNaN(topSelection) && isNaN(bottomSelection)) { 
                                // top = number, bottom = data
                                switch (operatorSelection) { 
                                    case "add": 
                                        value = Number(topSelection) + Number(rows[i][bottomSelection])
                                        break;
                                    case "subtract":
                                        value = Number(topSelection) - Number(rows[i][bottomSelection])
                                        break;
                                    case "multiply": 
                                        value = Number(topSelection) * Number(rows[i][bottomSelection])
                                        break;
                                    case "divide":
                                        value = Number(topSelection) / Number(rows[i][bottomSelection])
                                        break;
                                }        
                            } else if (isNaN(topSelection) && !isNaN(bottomSelection)) { 
                                // top is data, bottom is number
                                switch (operatorSelection) { 
                                    case "add": 
                                        value = Number(rows[i][topSelection]) + Number(bottomSelection)
                                        break;
                                    case "subtract":
                                        value = Number(rows[i][topSelection]) - Number(bottomSelection)
                                        break;
                                    case "multiply": 
                                        value = Number(rows[i][topSelection]) * Number(bottomSelection)
                                        break;
                                    case "divide":
                                        value = Number(rows[i][topSelection]) / Number(bottomSelection)
                                        break;
                                }    
                            } else { 
                                // top and bottom are data
                                switch (operatorSelection) { 
                                        case "add": 
                                            value = Number(rows[i][topSelection]) + Number(rows[i][bottomSelection])
                                            break;
                                        case "subtract":
                                            value = Number(rows[i][topSelection]) - Number(rows[i][bottomSelection])
                                            break;
                                        case "multiply": 
                                            value = Number(rows[i][topSelection]) * Number(rows[i][bottomSelection])
                                            break;
                                        case "divide":
                                            value = Number(rows[i][topSelection]) / Number(rows[i][bottomSelection])
                                            break;
                                    }    
                            }
                            seriesName = `${topSelection} ${operationDictionary[operatorSelection]} ${bottomSelection}`
                            data.push([
                                rows[i]["Date"],
                                seriesName,
                                value
                            ])
                            

                            /* GRAPH OPTION: MOVING AVERAGE for both top and bottom */
                            if (select2.selected().includes("moving-average")) { // MOVING AVERAGE
                                
                                totalOfLast.push(value) // push the current value to the array
                                
                                if (totalOfLast.length >= lookBackTime) { 
                                    var movingAverage = (addArray(totalOfLast)) / lookBackTime
                                    data.push([
                                        rows[i]["Date"],
                                        `${topSelection} ${operationDictionary[operatorSelection]} ${bottomSelection} (Moving Average - last ${lookBackTime} days)`,
                                        movingAverage
                                    ])
                                    totalOfLast.shift()
                                }                                                   
                            }

                            /* GRAPH OPTION: CALCULATING [x, y] for both top and bottom */
                            // check if any of the regression data are selected
                            //- var possibleRegressions = ['linear', 'exponential', 'logarithmic', 'power', 'polynomial']
                            //- var regressionSelected = select2.selected().some(r=> possibleRegressions.includes(r)) // https://stackoverflow.com/questions/16312528/check-if-an-array-contains-any-element-of-another-array-in-javascript/29447130
                            if (regressionSelected) { 
                                // construct data array
                                /*[
                                    [x1, y1],
                                    [x2, y2]
                                ]*/
                                dateIndex.push(rows[i]["Date"])                                
                                // Ignore data if all values were ZERO

                                if (Number(value)) { dataPresentCheck = true } // if number != 0
                                if (dataPresentCheck) { 
                                    regressionData.push([i, Number(value)])
                                }
                            }



                        } else { 
                            if (isNaN(topSelection)) { // because people can input numbers into top selection
                                seriesName = topSelection
                                data.push([
                                    rows[i]["Date"],
                                    seriesName,
                                    rows[i][topSelection]
                                ])
                                /* GRAPH OPTION: MOVING AVERAGE for top only */
                                if (select2.selected().includes("moving-average")) { // MOVING AVERAGE  
                                    totalOfLast.push(rows[i][topSelection])
                                    if (totalOfLast.length >= lookBackTime) { 
                                        var movingAverage = (addArray(totalOfLast)) / lookBackTime
                                        data.push([
                                            rows[i]["Date"],
                                            `${topSelection} (Moving Average - last ${lookBackTime} days)`,
                                            movingAverage
                                        ])
                                        totalOfLast.shift()
                                    }                                                                                                         
                                }
                                /* GRAPH OPTION: CALCULATING [x, y] for both top and bottom */
                                // check if any of the regression data are selected
                                if (regressionSelected) {                                     
                                    // construct data array
                                    /*[
                                        [x1, y1],
                                        [x2, y2]
                                    ]*/                                    
                                    dateIndex.push(rows[i]["Date"])
                                    // Ignore data if all values were ZERO

                                    if (Number(rows[i][topSelection])) { dataPresentCheck = true } // if number != 0
                                    if (dataPresentCheck) { 
                                        regressionData.push([i, Number(rows[i][topSelection])])
                                    }
                                    
                                }   
                            } else { 
                                seriesName = topSelection
                                data.push([
                                    rows[i]["Date"],
                                    topSelection,
                                    topSelection
                                ])
                            }
                            
                        }

                        
                        

                    }
                    // Regression data is done, we can now plot the graph. We need to first, calculate the regression equation.
                    if (regressionSelected) {                      
                        var lastDay = new Date(dateIndex[dateIndex.length-1])
                        var newDates = []
                        for (var d = 0; d <= lookForward; d++) { 
                            newDates.push(formatDates(new Date(lastDay.setDate(lastDay.getDate()+1)).toDateString()))
                        }


                        if (select2.selected().includes("linear")) { 
                            var linReg = regression('linear', regressionData)
                            var fittedData = linReg.points
                            var R = linReg.r2.toFixed(4)                            
                            for (var p = 0; p < fittedData.length; p++) {                                 
                                data.push([
                                    rows[fittedData[p][0]]["Date"],
                                    `${seriesName} (Linear Regression Rยฒ = ${R})`,
                                    Number(fittedData[p][1])
                                ])
                            }                        
                            /* WIP - Formula (y = ax+b)*/                        
                            
                            if (lookForward) { 
                                for (var d = 1; d <= lookForward; d++) { 
                                    var y = Number(linReg.equation[0]) * (dateIndex.length+d-1) + Number(linReg.equation[1]) // .length is not zero-based
                                    data.push([
                                        newDates[d-1],
                                        `${seriesName} (Linear Regression Rยฒ = ${R})`,
                                        y
                                    ])
                                }
                            }                    
                        }
                        if (select2.selected().includes("exponential")) {
                            
                            var temp = []                        
                            
                            for (var z = 0; z < regressionData.length; z++) {                                
                                if (!(regressionData[z][0] == 0) && !(regressionData[z][1] == 0)) {                                             
                                    temp.push(regressionData[z])
                                }
                            }                           
                            
                            var expoReg = regression('exponential', temp);
                            var fittedData = expoReg.points
                            var R = expoReg.r2.toFixed(4)                            
                            for (var p = 0; p < fittedData.length; p++) {                                 
                                data.push([
                                    rows[fittedData[p][0]]["Date"],
                                    `${seriesName} (Exponential Regression Rยฒ = ${R})`,
                                    Number(fittedData[p][1])
                                ])
                            }   
                            /* WIP - Formula (y=ae^bx) */
                            if (lookForward) { 
                                for (var d = 1; d <= lookForward; d++) { 
                                    var y = Number(expoReg.equation[0]) * Math.exp((dateIndex.length+d-1)*Number(expoReg.equation[1]))                                   
                                    
                                    data.push([
                                        newDates[d-1],
                                        `${seriesName} (Exponential Regression Rยฒ = ${R})`,
                                        y
                                    ])
                                }
                            }
                        }
                        if (select2.selected().includes("logarithmic")) { 

                            // Remove x = 0 as logReg cannot accept x = 0                           


                            var temp = []                        
                            
                            for (var z = 0; z < regressionData.length; z++) {                                
                                if (!(regressionData[z][0] == 0)) {                                             
                                    temp.push(regressionData[z])
                                }
                            } 

                            var logReg = regression('logarithmic', temp);  
                            var fittedData = logReg.points
                            var R = logReg.r2.toFixed(4)                            
                            for (var p = 0; p < fittedData.length; p++) {                                 
                                data.push([
                                    rows[fittedData[p][0]]["Date"],
                                    `${seriesName} (Logarithmic Regression Rยฒ = ${R})`,
                                    Number(fittedData[p][1])
                                ])
                            }                             
                            /* WIP - Formula (y=a+bln(x)) */
                            if (lookForward) { 
                                for (var d = 1; d <= lookForward; d++) { 
                                    var y = Number(logReg.equation[0]) + Number(logReg.equation[1])*(Math.log(dateIndex.length+d-1))                            
                                    
                                    data.push([
                                        newDates[d-1],
                                        `${seriesName} (Logarithmic Regression Rยฒ = ${R})`,
                                        y
                                    ])
                                }
                            }
                            
                        }
                        if (select2.selected().includes("power")) { 
                            // Remove x and y = 0 as logReg cannot accept x = 0                            
                            var temp = []                        
                            
                            for (var z = 0; z < regressionData.length; z++) {                                
                                if (!(regressionData[z][0] == 0) && !(regressionData[z][1] == 0)) {                                             
                                    temp.push(regressionData[z])
                                }
                            } 

                                            
                            
                            var powReg = regression('power', temp);      
                            var fittedData = powReg.points
                            var R = powReg.r2.toFixed(4)   
                                             
                            for (var p = 0; p < fittedData.length; p++) {                                 
                                data.push([
                                    rows[fittedData[p][0]]["Date"],
                                    `${seriesName} (Power Regression Rยฒ = ${R})`,
                                    Number(fittedData[p][1])
                                ])
                            }  
                            if (lookForward) { 
                                for (var d = 1; d <= lookForward; d++) { 
                                    var y = Number(powReg.equation[0]) * Math.pow(dateIndex.length+d-1, Number(powReg.equation[1]))                            
                                    
                                    data.push([
                                        newDates[d-1],
                                        `${seriesName} (Power Regression Rยฒ = ${R})`,
                                        y
                                    ])
                                }
                            }  
                           
                        }
                        if (select2.selected().includes("polynomial")) { 
                            
                            var polyReg = regression('polynomial', regressionData, Number(power));      
                            var fittedData = polyReg.points
                            var R = polyReg.r2.toFixed(4)   
                                             
                            for (var p = 0; p < fittedData.length; p++) {                                 
                                data.push([
                                    rows[fittedData[p][0]]["Date"],
                                    `${seriesName} (Polynomial Regression Order ${power} Rยฒ = ${R})`,
                                    Number(fittedData[p][1])
                                ])
                            }  
                            if (lookForward) {                             
                                for (var d = 1; d <= lookForward; d++) { 
                                    // power = 4
                                    var y = 0
                                    var ns = polyReg.equation
                                    for (var n = ns.length-1; n >= 0; n--) {
                                         
                                        y = Number(y)+(Number(polyReg.equation[n])*Math.pow((dateIndex.length+d-1),n))

                                    }                                    
                                    data.push([
                                        newDates[d-1],
                                        `${seriesName} (Polynomial Regression Order ${power} Rยฒ = ${R})`,
                                        y
                                    ])
                                }
                            }  
                        }



                        
                    }
                        
                    
                    
                })
                
                
                
            } else { 
                // is not Advanced mode


                //- var objDiv = document.getElementById("chart-container");
                //- objDiv.scrollTop = objDiv.scrollHeight
                
                
                
                // Get selected series names
                var selectedSeries = selectedSeries || select.selected() // ["New local dormitory cases (per day)", "New local work permit holder cases (per day)", "New local community cases (per day)", "New local cases (per day)"]
                if (!selectedSeries.length) {
                    alertify.error("Please select a series to plot!")
                    return
                }

                var series = []
                //- if (chart) chart.dispose()
                
                for (var i = 0; i < selectedSeries.length; i++) { 
                    URLArray.push(index.indexOf(selectedSeries[i]))
                }

                
           

                // Prepare data array
                
                
                selectedSeries.forEach(series => { 
                    // regression stuff
                    var dataPresentCheck = false
                    var regressionData = []
                    for (var i = 0; i < rows.length; i++) { // for every series, add the data to the set
                        data.push([
                            rows[i]["Date"],
                            series,
                            rows[i][series]
                        ])   
                        /* GRAPH OPTION: CALCULATING and ADDING Moving Average */
                        if (select2.selected().includes("moving-average")) { // MOVING AVERAGE  
                            totalOfLast.push(rows[i][series])
                            if (totalOfLast.length >= lookBackTime) { 
                                var movingAverage = (addArray(totalOfLast)) / lookBackTime
                                data.push([
                                    rows[i]["Date"],
                                    `${series} (Moving Average - last ${lookBackTime} days)`,
                                    movingAverage
                                ])
                                totalOfLast.shift()
                            }    
                        }  
                        /* GRAPH OPTION: CALCULATING [x, y] for both top and bottom */
                        // check if any of the regression data are selected
                        if (regressionSelected) {                                     
                            // construct data array
                            /*[
                                [x1, y1],
                                [x2, y2]
                            ]*/                                    
                            dateIndex.push(rows[i]["Date"])
                            // Ignore data if all values were ZERO

                            if (Number(rows[i][series])) { dataPresentCheck = true } // if number != 0
                            
                            if (dataPresentCheck) { 
                                regressionData.push([i, Number(rows[i][series])])
                            }
                            
                        }


                    }
                    // Regression data is done, we can now plot the graph. We need to first, calculate the regression equation.
                    if (regressionSelected) {                        
                        var lastDay = new Date(dateIndex[dateIndex.length-1])
                        var newDates = []
                        for (var d = 0; d <= lookForward; d++) { 
                            newDates.push(formatDates(new Date(lastDay.setDate(lastDay.getDate()+1)).toDateString()))
                        }
                        if (select2.selected().includes("linear")) { 
                            var linReg = regression('linear', regressionData)
                            
                            var fittedData = linReg.points
                            var R = linReg.r2.toFixed(4)                            
                            for (var p = 0; p < fittedData.length; p++) {                                 
                                data.push([
                                    rows[fittedData[p][0]]["Date"],
                                    `${series} (Linear Regression Rยฒ = ${R})`,
                                    Number(fittedData[p][1])
                                ])
                            }   

                            /* WIP - Formula (y = ax+b)*/                        
                            
                            if (lookForward) { 
                                for (var d = 1; d <= lookForward; d++) { 
                                    var y = Number(linReg.equation[0]) * (dateIndex.length+d-1) + Number(linReg.equation[1]) // .length is not zero-based
                                    data.push([
                                        newDates[d-1],
                                        `${series} (Linear Regression Rยฒ = ${R})`,
                                        y
                                    ])
                                }
                            }
                            

                            
                                                
                        }
                        if (select2.selected().includes("exponential")) {
                            
                            var temp = []                        
                            
                            for (var z = 0; z < regressionData.length; z++) {                                
                                if (!(regressionData[z][0] == 0) && !(regressionData[z][1] == 0)) {                                             
                                    temp.push(regressionData[z])
                                }
                            }                           
                            
                            var expoReg = regression('exponential', temp);
                            var fittedData = expoReg.points
                            var R = expoReg.r2.toFixed(4)                            
                            for (var p = 0; p < fittedData.length; p++) {                                 
                                data.push([
                                    rows[fittedData[p][0]]["Date"],
                                    `${series} (Exponential Regression Rยฒ = ${R})`,
                                    Number(fittedData[p][1])
                                ])
                            }   

                            /* WIP - Formula (y=ae^bx) */
                            if (lookForward) { 
                                for (var d = 1; d <= lookForward; d++) { 
                                    var y = Number(expoReg.equation[0]) * Math.exp((dateIndex.length+d-1)*Number(expoReg.equation[1]))                                   
                                    
                                    data.push([
                                        newDates[d-1],
                                        `${series} (Exponential Regression Rยฒ = ${R})`,
                                        y
                                    ])
                                }
                            }


                        }
                        if (select2.selected().includes("logarithmic")) { 

                            // Remove x = 0 as logReg cannot accept x = 0                           


                            var temp = []                        
                            
                            for (var z = 0; z < regressionData.length; z++) {                                
                                if (!(regressionData[z][0] == 0)) {                                             
                                    temp.push(regressionData[z])
                                }
                            } 

                            var logReg = regression('logarithmic', temp);  
                            var fittedData = logReg.points
                            var R = logReg.r2.toFixed(4)                            
                            for (var p = 0; p < fittedData.length; p++) {                                 
                                data.push([
                                    rows[fittedData[p][0]]["Date"],
                                    `${series} (Logarithmic Regression Rยฒ = ${R})`,
                                    Number(fittedData[p][1])
                                ])
                            }    
                            /* WIP - Formula (y=a+bln(x)) */
                            if (lookForward) { 
                                for (var d = 1; d <= lookForward; d++) { 
                                    var y = Number(logReg.equation[0]) + Number(logReg.equation[1])*(Math.log(dateIndex.length+d-1))                            
                                    
                                    data.push([
                                        newDates[d-1],
                                        `${series} (Logarithmic Regression Rยฒ = ${R})`,
                                        y
                                    ])
                                }
                            }                         
                            
                            
                        }
                        if (select2.selected().includes("power")) { 
                            // Remove x and y = 0 as logReg cannot accept x = 0                            
                            var temp = []                        
                            
                            for (var z = 0; z < regressionData.length; z++) {                                
                                if (!(regressionData[z][0] == 0) && !(regressionData[z][1] == 0)) {                                             
                                    temp.push(regressionData[z])
                                }
                            } 

                                            
                            
                            var powReg = regression('power', temp);      
                            var fittedData = powReg.points
                            var R = powReg.r2.toFixed(4)   
                                             
                            for (var p = 0; p < fittedData.length; p++) {                                 
                                data.push([
                                    rows[fittedData[p][0]]["Date"],
                                    `${series} (Power Regression Rยฒ = ${R})`,
                                    Number(fittedData[p][1])
                                ])
                            }  
                            if (lookForward) { 
                                for (var d = 1; d <= lookForward; d++) { 
                                    var y = Number(powReg.equation[0]) * Math.pow(dateIndex.length+d-1, Number(powReg.equation[1]))                            
                                    
                                    data.push([
                                        newDates[d-1],
                                        `${series} (Power Regression Rยฒ = ${R})`,
                                        y
                                    ])
                                }
                            }  
                            
                           
                        }
                        if (select2.selected().includes("polynomial")) { 
                           
                            
                            var polyReg = regression('polynomial', regressionData, Number(power));      
                            
                            var fittedData = polyReg.points
                            var R = polyReg.r2.toFixed(4)   
                                             
                            for (var p = 0; p < fittedData.length; p++) {                                 
                                data.push([
                                    rows[fittedData[p][0]]["Date"],
                                    `${series} (Polynomial Regression Order ${power} Rยฒ = ${R})`,
                                    Number(fittedData[p][1])
                                ])
                            }  
                            
                            if (lookForward) {                             
                                for (var d = 1; d <= lookForward; d++) { 
                                    // power = 4
                                    var y = 0
                                    var ns = polyReg.equation
                                    for (var n = ns.length-1; n >= 0; n--) {
                                         
                                        y = Number(y)+(Number(polyReg.equation[n])*Math.pow((dateIndex.length+d-1),n))

                                    }                                    
                                    data.push([
                                        newDates[d-1],
                                        `${series} (Polynomial Regression Order ${power} Rยฒ = ${R})`,
                                        y
                                    ])
                                }
                            }  



                        }
                    }



                })









                
            }

            /* ---------------------- GRAPH OPTIONS ---------------------- */
            // check if log selected
            var isLog = select2.selected().includes("log") ? "log" : ''
            var log = isLog.length ? true : false
            //- if (params.log) isLog = "log" // URL check
            // Clear params.log
            params.log = false

            // check if movAvg selected
            var movAvg = select2.selected().includes("moving-average") ? "true" : "false"
            var movAvgSel = select2.selected().includes("moving-average") ? lookBackTime : "false"
            var linRegSel = select2.selected().includes("linear") ? "true" : "false"
            var expoRegSel = select2.selected().includes("exponential") ? "true" : "false"
            var logRegSel = select2.selected().includes("logarithmic") ? "true" : "false"
            var powerRegSel = select2.selected().includes("power") ? "true" : "false"
            var polyRegSel = select2.selected().includes("polynomial") ? "true" : "false"
            var polyPowerSel = select2.selected().includes("polynomial") ? power : "false"
            var extrapolate = select2.selected().includes("look-forward") ? "true" : "false";
            var extrapolateLength = select2.selected().includes("look-forward") ? lookForward : "false"
       

            /* ---------------------- GRAPH OPTIONS ---------------------- */
            if (!(Object.keys(FusionCharts.items).length === 0 && FusionCharts.items.constructor === Object)) { 
                FusionCharts.items[Object.keys(FusionCharts.items)[0]].dispose()
            }
            
            /* ---------------------- GRAPH OPTIONS ---------------------- */
            var caption = "User Generated Chart"
            var dataStore = new FusionCharts.DataStore()
            var dataSource = { 
                chart: {
                    exportEnabled: "1",
                    theme: theme
                },
                caption: {
                    text: caption
                },
                series: "Type",
                yAxis: [
                    {
                        plot: "Case Numbers",
                        title: "Cases",
                        type: isLog
                    }
                ]

            }
            dataSource.data = dataStore.createDataTable(data, schema)
            var chart = new FusionCharts({
                type: "timeseries",
                renderAt: "chart-container",
                width: "100%",
                height: "100%",
                dataSource: dataSource
            }).render()
            
            URLString = URLArray.join("l")
            document.getElementById("link-url").innerHTML = `https://sgcovidgraphs.xyz/create?series=... <i class="far fa-copy" id='animate3'></i>`
           
            document.getElementById("link-url-copy").value = `https://sgcovidgraphs.xyz/create?type=${isAdv}&series=${URLString}&log=${log}&movAvg=${movAvg}&movAvgLBT=${movAvgSel}&linReg=${linRegSel}&expoReg=${expoRegSel}&logReg=${logRegSel}&powReg=${powerRegSel}&polyReg=${polyRegSel}&polyRegPow=${polyPowerSel}&ext=${extrapolate}&extLen=${extrapolateLength}`
            
            

            document.getElementById("hidden").style.display = "block"
           

        }

        /* Decoding URL */
        var params = !{stringify(params)}
        if (params.series) { 
            if (params.type == "true") { 
                // is an ADVANCED graph
                // set all the slimselects
                var URLArray = params.series.split("l")
                advancedSelectTop1.set(index[URLArray[0]])
                advancedSelectOperation1.set(operators[URLArray[1]])
                advancedSelectBottom1.set(index[URLArray[2]])
                advancedSelectTop2.set(index[URLArray[3]])
                advancedSelectOperation2.set(operators[URLArray[4]])
                advancedSelectBottom2.set(index[URLArray[5]])
                advancedSelectTop3.set(index[URLArray[6]])
                advancedSelectOperation3.set(operators[URLArray[7]])
                advancedSelectBottom3.set(index[URLArray[8]])
                advancedSelectTop4.set(index[URLArray[9]])
                advancedSelectOperation4.set(operators[URLArray[10]])
                advancedSelectBottom4.set(index[URLArray[11]])
                advancedSelectTop5.set(index[URLArray[12]])
                advancedSelectOperation5.set(operators[URLArray[13]])
                advancedSelectBottom5.set(index[URLArray[14]])
                advancedSelectTop6.set(index[URLArray[15]])
                advancedSelectOperation6.set(operators[URLArray[16]])
                advancedSelectBottom6.set(index[URLArray[17]])
                //- isAdv = true
                document.getElementById("show-advanced-btn").click()
            } else { 
                // is a LAME graph
                
                var URLArray = params.series.split("l")
                var selectedSeries = []                
                
                for (var i = 0; i < URLArray.length; i++) { 
                    selectedSeries.push(index[URLArray[i]])                    
                }
                select.set(selectedSeries)

                
            }

            var arrOpts = []
            if (params.log == "true") {                                      
                arrOpts.push("log")                       
            }
            if (params.movAvg == "true") { 
                arrOpts.push("moving-average")
                if (params.movAvgLBT) { 
                    if (isNaN(params.movAvgLBT) || params.movAvgLBT > 50 || params.movAvgLBT == 0) {
                        lookBackTime = 7
                    } else { 
                        lookBackTime = params.movAvgLBT
                    }
                    
                }
            }
            if (params.linReg == "true") { 
                arrOpts.push("linear")
            }
            if (params.expoReg == "true") { 
                arrOpts.push('exponential')
            }
            if (params.logReg == "true") { 
                arrOpts.push('logarithmic')
            }
            if (params.powReg == "true") { 
                arrOpts.push('power')
            }
            if (params.polyReg == "true") { 
                arrOpts.push("polynomial")
                if (params.polyRegPow) {                    
                    if (isNaN(params.polyRegPow) || params.polyRegPow > 50 || params.polyRegPow == 0) {
                        power = 4
                    } else { 
                        power = params.polyRegPow
                    }

                }
            }
            if (params.ext == "true") { 
                arrOpts.push('look-forward')
                if (params.extLen) { 
                    if (isNaN(params.extLen) || params.extLen > 500 || params.extLen == 0) { 
                        lookForward = 0
                    } else { 
                        lookForward = params.extLen
                    }
                }
            }

            select2.set(arrOpts)
            

            generateChart()
        }

        

    
        
